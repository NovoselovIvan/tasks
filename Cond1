using System;

namespace Cond1
{
    class Program
    {
        public static bool WasMoveMade(int dx, int dy)
        {
            return (dx + dy) > 0;
        }

        public static bool IsCellCorrect(string cell)
        {
            var file = cell[0];
            var rank = cell[1];
            var isFileValid = 'a' <= file && file <= 'h';
            var isRankValid = '1' <= rank && rank <= '8';
            return isFileValid && isRankValid;
        }

        public static bool IsMoveValid(string from, string to)
        {
            if (!(IsCellCorrect(from) && IsCellCorrect(to)))
                return false;
            var (dx, dy) = GetMoveCoordinates(from, to);
            return WasMoveMade(dx, dy);
        }

        public static (int, int) GetMoveCoordinates(string from, string to)
        {
            var dx = Math.Abs(from[0] - to[0]);
            var dy = Math.Abs(from[1] - to[1]);
            return (dx, dy);
        }

        public static bool IsCorrectMoveForRook(string firstCell, string lastCell)
        {var (dx, dy) = GetMoveCoordinates(firstCell, lastCell);
            return (dx == 2 && dy == 1) || (dy == 2 && dx == 1);
        }

        public static bool IsCorrectMoveForKnight(string firstCell, string lastCell) 
        {
            var (dx, dy) = GetMoveCoordinates(firstCell, lastCell);
            return dx == 0 || dy == 0;
        }

        public static bool IsCorrectMoveForBishop(string firstCell, string lastCell)
        {
            var (dx, dy) = GetMoveCoordinates(firstCell, lastCell);
            return dx == dy;
        }

        public static bool IsCorrectMoveForQueen(string firstCell, string lastCell)
        {
            var (dx, dy) = GetMoveCoordinates(firstCell, lastCell);
            return dx == 0 || dy == 0 || dx == dy;
        }

        public static bool IsCorrectMoveForKing(string firstCell, string lastCell)
        {
            var (dx, dy) = GetMoveCoordinates(firstCell, lastCell);
            return (dx == 0 || dy == 0 || dx == dy) && (dx < 2 && dy < 2);
        }

        static void Main(string[] args)
        {
            var firstCell = Console.ReadLine();
            var lastCell = Console.ReadLine();

            Console.WriteLine("Is that correct move?");
            if (IsMoveValid(firstCell, lastCell))
            {
                Console.WriteLine("For Rook: " + IsCorrectMoveForRook(firstCell, lastCell));
                Console.WriteLine("For Knight: " + IsCorrectMoveForKnight(firstCell, lastCell));
                Console.WriteLine("For Bishop: " + IsCorrectMoveForBishop(firstCell, lastCell));
                Console.WriteLine("For Queen: " + IsCorrectMoveForQueen(firstCell, lastCell));
                Console.WriteLine("For King: " + IsCorrectMoveForKing(firstCell, lastCell));
            }
            else
                Console.WriteLine("Data is incorrect");
        }
    }
}
